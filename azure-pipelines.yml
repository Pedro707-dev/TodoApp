trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main
variables:
  - name: pythonVersion
    value: '3.11'

stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      name: 'MyPull'
    steps:

    # -------------------- Preparar carpeta reports --------------------
    - task: PowerShell@2
      displayName: 'Prep reports directory'
      inputs:
        targetType: inline
        script: |
          if (!(Test-Path -Path reports)) {
            New-Item -ItemType Directory -Path reports -Force
            Write-Host "Created reports directory."
          }
        failOnStderr: true

    
    - task: PowerShell@2
      displayName: 'Install dependencies'
      inputs:
        targetType: inline
        script: |
          # Crear y activar virtualenv
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

          # Actualizar pip
          python -m pip install --upgrade pip

          # Ruta al requeriments.txt
          $reqPath = Join-Path "$(Build.SourcesDirectory)" "todoApp\requeriments.txt"

          # Verificar si existe, si no crearlo vacío
          if (Test-Path -Path $reqPath) {
              Write-Host "Installing dependencies from $reqPath ..."
              python -m pip install -r $reqPath
          } else {
              Write-Warning "requeriments.txt no encontrado. Creando archivo vacío."
              New-Item -ItemType File -Path $reqPath -Force | Out-Null
          }

          # Instalar pytest-html por si no está en requeriments
          python -m pip install pytest-html

          # Mostrar versiones instaladas
          python -c "import django; print('Django version:', django.get_version())"
          python -c "import pytest; print('Pytest version:', pytest.__version__)"
        failOnStderr: true

        # -------------------- Cache pip (sin depender del archivo) --------------------

    - task: Cache@2
      displayName: 'Cache pip (safe static key)'
      inputs:
        key: 'pip | "$(Agent.OS)" | static-v1'
        path: 'C:\Users\Pedro.solorin\AppData\Local\pip\Cache'
        cacheHitVar: 'CACHE_RESTORED'

    # -------------------- Instalar dependencias --------------------

    # -------------------- Migraciones y tests --------------------
    - task: PowerShell@2
      displayName: 'Run migrations and tests'
      inputs:
        targetType: inline
        script: |
          .\.venv\Scripts\Activate.ps1

          # Cambiar al directorio del proyecto
          Push-Location "$(Build.SourcesDirectory)"

          $env:PYTHONPATH = "$(Build.SourcesDirectory)\todoApp"
          $env:DJANGO_SETTINGS_MODULE = "todoApp.settings"

          Write-Host "Running migrations..."
          python manage.py migrate --noinput

          Write-Host "Running tests..."
          pytest tasks/tests/ --junitxml=reports/junit.xml --html=reports/pytest.html --maxfail=1 -q -v

          Pop-Location
        failOnStderr: true

    # -------------------- Publicar resultados JUnit --------------------
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/junit.xml'
        mergeTestResults: true
        publishRunAttachments: true
      condition: succeededOrFailed()
      displayName: 'Publish test results'

    # -------------------- Publicar artifact reports --------------------
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'reports'
        artifact: 'test-reports'
      condition: succeededOrFailed()
      displayName: 'Publish test reports artifact'
